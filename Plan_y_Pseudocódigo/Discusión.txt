Discusión:

Pedir tanta memoria como necesitemos (osea argc elementos) es acoplar los detalles del ADT_vector a esta implementacion en particular.

Nos debatimos que conviene mas si que al crear el arreglo este se incialize en nulo y luego tener que llamar si o si a la funcion de expansion deel vector para hacer lugar, lo cual no nos convencia porque si usabamos el realloc estaria siempre creciendo a la misma tasa, medio flojo, y si usabamos un malloc para lugo un realloc bueno, ese malloc podria ir en la de creacion y asi quizas ahorrarnos una llamada a una función.

Es por esto que creemos que la opcion mas viable es que al crear el vector lo de ya con un poco de memoria.

Otra opcion seria que te lo de vacio y que vos puedas decirle cuanto necesitas al llamar a la primitiva de expansión.

Como cargamos toda la informacion de los archivos mp3 ? y como la guardamos en un vector?

No es posible o si lo es no sabemos como hacer para crear una cantidad desconocida de datos "track_t"

La mejor forma de hacerlo que se nos ocurrio por ahora es usar un puntero auxiliar, cargar el track y guardarlo en el vector al mismo tiempo, siempre usando un solo puntero auxiliar, y todo dentro de un mismo ciclo iterativo.

Dejar el alloc_size dentro de la estructura principal del TDA_Vector sacrifica un poco de memoria pero es clave para la funcionalidad del TDA.

Tambien decidimos que se cree con memoria e inicialize todo a cero,es una banda de laburo el que hace pero esta bueno para ahorrarse laburo despues y ya poder empezar a laburar de una.

ta re gede la cosa pa ponerse a pensar en el orden de los CLA 

Estamos por terminar la estructuración del main y fue alto laburo...


vicio de "programacion" --> contaminar el pseudocódigo con lenguage C.

A la hora de hacer la comparación, vamos a asumir que en la mayoría de los casos los nombres van a diferir en las primeras letras. Es por esto,
que a la hora de definir los tipos de datos del ADT_Track_t se estableció que sean arreglos de caracteres pues facilita las cosas al imprimir.

ADT_Vector: Pedimos poca memoria con el primer malloc, solo para arrancar, despues con una estrategia de incrementacion geoemetrica satisfacemos los nuevos pedidos, esta bueno porque va creciendo segun la necesidad hasta abastecerla por completo.

Sort-Mode: para elegir que algoritmo de ordenamiento usar tuvimos en cuenta que los intercambios para nosotros son re baratos (punteros) pero las comparaciones son considerablemente caras, es por esto que no tenemos que preocuparnos por la cantidad de intercambios de nuestro algoritmo pero si de la cantidad de comparaciones. Basandonos en esto, no tardamos mucho en descartar el insection sort, el cual puede llegar a hacer el doble de comparaciones que el selection sort" y es eficiente en intercambios, pero esto no nos importa. Nos quedan el bubblesort y el insectionsort, y como en nuestro caso no nos interesa que los elementos quedden en su posicion final, sino que queremos optimizar en cantidad de comparaciones,suponemos que los mp3 pueden venir venir en cualquier orden, no hay porque pensar que van a venir casi ordenados, u ordenados al revez, y en un caso promedio insection sort hace  n²/4 comparaciones, la mitad que las debidas a un caso promedio utilizando bubblesort (n²/2).
Sacrificamos eficiencia devuelta suponiendo que no vamos a estar en un entorno escaso de recursos computacionales y decidimos no hardcodear la impresion del track como XML si no que se adapte al entorno a traves de la variable init_tab.
decidimos que los argumentos puedan venir en cualquier orden, solamente por robustez, al hacerlo se nos re complicaron las validaciones, porque teniamos que validar todos los argumentos por un lado y usarlos para setear la configuracion por otro. Nos dimos cuenta que separar por completo estas dos "acciones" es casi imposible, por esto tuvimos que elegir que se iba a validar el inicio del programa y con que incertezas vavanzariamos. en este planteo decidimos que la funcion get_config() se encargue de validar los argumentos que necesita al momento de procesarlos, asi a tarea de validacion queda un poco fragmentada, pero el procesamiento y la traduccion de la informacion se independiza.
PROCESAMIENTO Y TRADUCCION DE LA CONFIGURACION:
pensamos traducir la info y guardarla en variables separadas, pero esto implicaba manipular muchas variables distintas y por ejemplo que al pasarselas al setter la funcion quede sobrecargada de argumentos. entonces  decidimos agrupar las variables en una estructura de forma tal que la manipulacion de este grupo de varaibles se facilite. LLEgado este punto, surgio el problema de que debiamos contemplar distintos casos con distintos tipos de variables, nuestra estructra no podia ser funcional a todos los formatos de impresion al mismo tiempo. Esto se soluciono usando variables estaticas a las cuales el miembro  void* (notesé que este miembro si es gnerico y no discrimina entre tipo de dato apuntado) apuntaria para luego ser pasadas a las funciones que las necesiten. El problema de esto (por ahora) es que tenemos 6 variables estaticas declaradas de las cuales solo usamos 3, esto ya lo solucionamos, simplemente creando dos modulos distintos 

