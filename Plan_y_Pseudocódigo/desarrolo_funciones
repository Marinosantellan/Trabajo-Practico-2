extractos


	process_settings( char* argv[] , comparator_t *fcomparator , printer_t *fprint)
	[

		smode_t smode;
		format_t print_format;		

		get_sort_mode(char* argv[] ,smode_t *smode_p );

		get_format(char* argv[] , format_t *print_format);

		set_comparator(smode_t mode , comparator_t fcomparator);

		set_printer(format_t print_format , printer_t *fprint);

	]


		set_vector_config(ADT_Vector_t* , printer_t* , comparator_t* , destructor_t* );
	[
		setear_destructor_element_del_Vector;

		setear_modo_comparator_del_Vector;

		setear_printer_del_Vector;
	]


	process_mp3( argv, un_vector , algo_mas )
	{

		CICLO(para cada argv) //Leemos todos los mp3 y los guardamos en un vector  (load_mp3)

		{

			abrir el archivo iesimo en modo binario 

			adt_track *pointer;

			crear el track iesimo (crea un dato tipo ADT_Track que está en memoria dinamica, y no esta inicializado)

			obtener el indice y guardarlo en el track_t recién creado (primitiva de track_adt)

			cargar el track en la posicion iesima del vector

		}
			...
		ADT_Vector_grow();
			...


		ADT_Vector_sort( ADT_Vector) Ordenar los elementos del vector por (metodo de ordenamiento)
	{

	};

	Vector_export( ADT_Vector , format_t )Imprimir los elementos ordenados en (formato indicado)
	{
		ADT_Vector_export_as_CSV(ADT_Vector);
		ADT_Vector_export_as_XLM(ADT_Vector);
	}


	
	}//ACA YA TENEMOS EL VECTOR CON TODOS LOS INDICES MP3 CARGADOS PEERFECTOOO REY.
